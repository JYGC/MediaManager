@using OPMF.Entities
@using MediaManagerUI.Modules.VideoBrowser

<MudTable T="ChannelMetadata"
            Items="_videoBrowserModule?.Results"
            Breakpoint="Breakpoint.Sm"
            Loading="@(_videoBrowserModule?.IsLoading ?? false)"
            Virtualize="true"
            FixedHeader="true"
            LoadingProgressColor="Color.Info"
            Height="80vh">
    <ToolBarContent>
        @if (TableToolBarContent != null)
        {
            @TableToolBarContent
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Status</MudTh>
        <MudTh>Channel</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Duration</MudTh>
        <MudTh>Published at</MudTh>
    </HeaderContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <RowTemplate>
        <MudTd DataLabel="Status">
            @if (_videoBrowserModule != null)
            {
                @if (context.Metadata.IsBeingDownloaded)
                {
                    <MudText>Video is being downloaded...</MudText>
                }
                else
                {
                    @foreach (var status in _metadataStatus)
                    {
                        <MudButton Variant="@ComputeStatusButtonVariant(status, context.Metadata)"
                                    Color="@((context.Metadata.Status == status) ? Color.Secondary : Color.Default)"
                                    OnClick="() => _videoBrowserModule.ScheduleMetadataStatusUpdate(status, context.Metadata)"
                                    Disabled="_videoBrowserModule.UnselectableMetadataStatuses.Contains(status)"
                                    Size="Size.Small"
                                    Class="ml-0 mr-0 pl-2 pr-2">
                            @status
                        </MudButton>
                    }
                }
            }
        </MudTd>
        <MudTd DataLabel="Channel">
            <MudButton OnClick="@(() => OpenChannelDetailDialog(context))">@context.Channel.Name</MudButton>
        </MudTd>
        <MudTd DataLabel="Title">
            <MudButton OnClick="@(() => OpenVideoDetailDialog(context))">@context.Metadata.Title</MudButton>
        </MudTd>
        <MudTd DataLabel="Duration">
            @if (context.Metadata.Duration == TimeSpan.Zero)
            {
                <MudText>No data</MudText>
            }
            else
            {
                <MudText>@context.Metadata.Duration</MudText>
            }
        </MudTd>
        <MudTd DataLabel="PublishedAt">
            <MudText>@context.Metadata.PublishedAt</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@if (_selectedChannelMetadata != null)
{
    <MudDialog @bind-Visible="_showVideoDetailsDialog"
                style="overflow: scroll; height: 100vh"
                Options="_dialogOptions">
        <DialogContent>
            <_VideoDetails @bind-VideoBrowserModule="_videoBrowserModule"
                            @bind-ChannelMetadata="_selectedChannelMetadata" />
        </DialogContent>
    </MudDialog>
    <MudDialog @bind-Visible="_showChannelDetailsDialog"
                style="overflow: scroll; height: 100vh"
                Options="_dialogOptions">
        <DialogContent>
            <_ChannelDetails @bind-Channel="_selectedChannelMetadata.Channel" />
        </DialogContent>
    </MudDialog>
}

@code {
    private IVideoBrowserModule? _videoBrowserModule;
    [Parameter]
    public IVideoBrowserModule? VideoBrowserModule
    {
        get => _videoBrowserModule;
        set
        {
            if (_videoBrowserModule == value)
            {
                return;
            }
            _videoBrowserModule = value;
            VideoBrowserModuleChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<IVideoBrowserModule> VideoBrowserModuleChanged { get; set; }

    [Parameter]
    public RenderFragment? TableToolBarContent { get; set; }

    private MetadataStatus[] _metadataStatus = Enum.GetValues(typeof(MetadataStatus)).Cast<MetadataStatus>().ToArray();

    protected override void OnParametersSet()
    {
        if (_videoBrowserModule == null)
        {
            throw new Exception("Please set GetResults to a method");
        }
        base.OnParametersSet();
    }

    private readonly DialogOptions _dialogOptions = new() { FullScreen = true, CloseButton = true };

    private ChannelMetadata? _selectedChannelMetadata = new ChannelMetadata { Metadata = new Metadata(), Channel = new Channel() };
    private bool _showVideoDetailsDialog;
    private void OpenVideoDetailDialog(ChannelMetadata channelMetadata)
    {
        _selectedChannelMetadata = channelMetadata;
        _showVideoDetailsDialog = true;
    }

    private bool _showChannelDetailsDialog;
    private void OpenChannelDetailDialog(ChannelMetadata channelMetadata)
    {
        _selectedChannelMetadata = channelMetadata;
        _showChannelDetailsDialog = true;
    }

    private Variant ComputeStatusButtonVariant(MetadataStatus status, Metadata metadata) =>
        (_videoBrowserModule != null && !_videoBrowserModule.UnselectableMetadataStatuses.Contains(status)) ? Variant.Filled
            : (metadata.Status == status) ? Variant.Outlined
            : Variant.Text;
}
