@using OPMF.Entities
@using MediaManagerUI.Modules.VideoBrowser

@if (ChannelMetadata != null && ChannelMetadata.Metadata != null)
{
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Title: </b></MudText>
        <MudText>@ChannelMetadata.Metadata.Title</MudText>
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Thumbnail: </b></MudText>
        <MudImage Src="@ChannelMetadata.Metadata.Thumbnail.Url"
                    Height="@((int?)ChannelMetadata.Metadata.Thumbnail.Height)"
                    Width="@((int?)ChannelMetadata.Metadata.Thumbnail.Width)" />
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Channel: </b></MudText>
        <MudText>@(ChannelMetadata.Channel == null ? "Unknown" : ChannelMetadata.Channel.Name)</MudText>
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Url: </b></MudText>
        <MudLink Href="@ChannelMetadata.Metadata.Url">@ChannelMetadata.Metadata.Url</MudLink>
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Duration: </b></MudText>
        @if (ChannelMetadata.Metadata.Duration == TimeSpan.Zero)
        {
            <MudText>No data</MudText>
        }
        else
        {
            <MudText>@ChannelMetadata.Metadata.Duration</MudText>
        }
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Description: </b></MudText>
        <_MultilineTextAsParagraphs Text="@ChannelMetadata.Metadata.Description" />
    </MudPaper>
    @if (_videoBrowserModule != null)
    {
        <MudPaper Class="pa-2 ma-2" Outlined="true">
            <MudText><b>Actions: </b></MudText>
            @if (ChannelMetadata.Metadata.IsBeingDownloaded)
            {
                <MudText>Video is being downloaded...</MudText>
                <MudButton Variant="Variant.Filled" OnClick="@(() => _videoBrowserModule.RemoveIsBeingDownloadedStatus(ChannelMetadata))">
                    Remove "being downloaded" block
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" OnClick="@(() => _videoBrowserModule.DownloadVideoNow(ChannelMetadata))">
                    Download Now
                </MudButton>
            }
        </MudPaper>
    }
}

@code {
    private IVideoBrowserModule? _videoBrowserModule;
    [Parameter]
    public IVideoBrowserModule? VideoBrowserModule
    {
        get => _videoBrowserModule;
        set
        {
            if (_videoBrowserModule == value)
            {
                return;
            }
            _videoBrowserModule = value;
            VideoBrowserModuleChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<IVideoBrowserModule> VideoBrowserModuleChanged { get; set; }

    private ChannelMetadata? _channelMetadata;
    [Parameter]
    public ChannelMetadata? ChannelMetadata
    {
        get => _channelMetadata;
        set
        {
            if (_channelMetadata ==  value)
            {
                return;
            }
            _channelMetadata = value;
            ChannelMetadataChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<ChannelMetadata> ChannelMetadataChanged { get; set; }
}
