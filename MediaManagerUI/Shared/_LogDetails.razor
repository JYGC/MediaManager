@using System.Text.Json
@using OPMF.Entities
@using MediaManagerUI.Modules.LogBrowser

@if (Log != null)
{
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Logged date: </b></MudText>
        <MudText>@Log.DateCreated</MudText>
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Log type: </b></MudText>
        <MudText>@Log.Type</MudText>
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Message: </b></MudText>
        <MudText>@Log.Message</MudText>
    </MudPaper>
    <MudPaper Class="pa-2 ma-2" Outlined="true">
        <MudText><b>Variables: </b></MudText>
        <_MultilineTextAsParagraphs Text="@JsonSerializer.Serialize(Log.Variables,
            new JsonSerializerOptions { WriteIndented = true })" />
    </MudPaper>
    @if (!string.IsNullOrWhiteSpace(Log.ExceptionObject))
    {
        <MudPaper Class="pa-2 ma-2" Outlined="true">
            <MudText><b>Exception: </b></MudText>
            <_MultilineTextAsParagraphs Text="@Log.ExceptionObject" />
        </MudPaper>
    }
}

@code {
    private OPMFLog? _log;
    [Parameter]
    public OPMFLog? Log
    {
        get => _log;
        set
        {
            if (_log == value)
            {
                return;
            }
            _log = value;
            LogChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<OPMFLog> LogChanged { get; set; }
}