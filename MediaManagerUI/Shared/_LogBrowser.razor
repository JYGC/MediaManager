@using OPMF.Entities
@using MediaManagerUI.Modules.LogBrowser

@if (_logBrowserModule != null)
{
    <MudTable T="OPMFLog"
              Items="_logBrowserModule.Results"
              Breakpoint="Breakpoint.Sm"
              Loading="@(_logBrowserModule.IsLoading)"
              Virtualize="true"
              FixedHeader="true"
              LoadingProgressColor="Color.Info"
              Height="80vh">
        <ToolBarContent>
            @if (TableToolBarContent != null)
            {
                @TableToolBarContent
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Date logged</MudTh>
            <MudTh>Message</MudTh>
            <MudTd></MudTd>
        </HeaderContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <RowTemplate>
            <MudTd DataLabel="Date logged">@context.DateCreated</MudTd>
            <MudTd DataLabel="Error Message">@context.Message</MudTd>
            <MudTd>
                <MudButton OnClick="@(() => OpenLogDetailDialog(context))">Details</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@if (_selectedLog != null)
{
    <MudDialog @bind-Visible="_showLogDetailsDialog"
               style="overflow: scroll; height: 100vh"
               Options="_dialogOptions">
        <DialogContent>
            <_LogDetails @bind-Log="_selectedLog" />
        </DialogContent>
    </MudDialog>
}

@code {
    private ILogBrowserModule? _logBrowserModule;
    [Parameter]
    public ILogBrowserModule? LogBrowserModule
    {
        get => _logBrowserModule;
        set
        {
            if (_logBrowserModule == value)
            {
                return;
            }
            _logBrowserModule = value;
            LogBrowserModuleChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<ILogBrowserModule> LogBrowserModuleChanged { get; set; }

    [Parameter]
    public RenderFragment? TableToolBarContent { get; set; }

    protected override void OnParametersSet()
    {
        if (_logBrowserModule == null)
        {
            throw new Exception("Please set GetResults to a method");
        }
        base.OnParametersSet();
    }

    private readonly DialogOptions _dialogOptions = new() { FullScreen = true, CloseButton = true };

    private OPMFLog _selectedLog = new OPMFLog();
    private bool _showLogDetailsDialog;
    private void OpenLogDetailDialog(OPMFLog log)
    {
        _selectedLog = log;
        _showLogDetailsDialog = true;
    }
}
