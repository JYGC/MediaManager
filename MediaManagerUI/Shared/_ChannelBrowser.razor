@using OPMF.Entities
@using MediaManagerUI.Modules.ChannelBrowser

@if (_channelBrowserModule != null)
{
    <MudTable T="Channel"
              Items="_channelBrowserModule.Results"
              Breakpoint="Breakpoint.Sm"
              Loading="@(_channelBrowserModule.IsLoading)"
              Virtualize="true"
              FixedHeader="true"
              LoadingProgressColor="Color.Info"
              Height="80vh">
        <ToolBarContent>
            @if (TableToolBarContent != null)
            {
                @TableToolBarContent
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Blacklisted</MudTh>
            <MudTh>Channel Name</MudTh>
            <MudTh>Date of Last Upload</MudTh>
        </HeaderContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <RowTemplate>
            <MudTd DataLabel="@(context.Blacklisted ? "Blacklisted" : "Not blacklisted")">
                <MudSwitch @bind-Value="context.Blacklisted"
                           @bind-Value:after="() => _channelBrowserModule.ScheduleChannelBacklistChange(context)"
                           Color="Color.Secondary" />
            </MudTd>
            <MudTd DataLabel="Name">
                <MudButton OnClick="@(() => OpenChannelDetailDialog(context))">@context.Name</MudButton>
            </MudTd>
            <MudTd DataLabel="LastActivityDate">@context.LastActivityDate</MudTd>
        </RowTemplate>
    </MudTable>
}

@if (_selectedChannel != null)
{
    <MudDialog @bind-Visible="_showChannelDetailsDialog"
               style="overflow: scroll; height: 100vh"
               Options="_dialogOptions">
        <DialogContent>
            <_ChannelDetails @bind-Channel="_selectedChannel" />
        </DialogContent>
    </MudDialog>
}

@code {
    private IChannelBrowserModule? _channelBrowserModule;
    [Parameter]
    public IChannelBrowserModule? ChannelBrowserModule
    {
        get => _channelBrowserModule;
        set
        {
            if (_channelBrowserModule == value)
            {
                return;
            }
            _channelBrowserModule = value;
            ChannelBrowserModuleChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<IChannelBrowserModule> ChannelBrowserModuleChanged { get; set; }

    [Parameter]
    public RenderFragment? TableToolBarContent { get; set; }

    protected override void OnParametersSet()
    {
        if (_channelBrowserModule == null)
        {
            throw new Exception("Please set GetResults to a method");
        }
        base.OnParametersSet();
    }

    private readonly DialogOptions _dialogOptions = new() { FullScreen = true, CloseButton = true };

    private Channel? _selectedChannel = new Channel();
    private bool _showChannelDetailsDialog;
    private void OpenChannelDetailDialog(Channel channel)
    {
        _selectedChannel = channel;
        _showChannelDetailsDialog = true;
    }
}
